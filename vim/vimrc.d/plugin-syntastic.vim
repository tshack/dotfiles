" JAS 08.14.2022
" Syntastic and YCM don't play nice together anymore.  Both attempt to
" perform syntax checking, which is naturally not a good thing.  Running
" Syntastic is PASSIVE MODE now, but keeping it around just for its
" population of the location list with errors.  Errors populated in the
" location list are generated by YCM.  Location list can be manually
" opened/closed with the vim defaults (:lopen) and (:lclose).  A bind to
" <Leader>e is mapped here to provide an easy toggle.


" Log syntastic output / view with :mes
" let g:syntastic_debug = 1

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_highlighting = 0
let g:syntastic_loc_list_height=4

let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": ["", ""],
    \ "passive_filetypes": ["", ""] }

" pylint is very strict & the loc_list is persistent until you fix all errors.
" I write more proof-of-concept code in Python than distributable modules.
" So for Python, this feature is usually more annoying than helpful.
"autocmd FileType python let g:syntastic_auto_loc_list = 0

" pylint is insanely slow when importing modules.  In the context of
" syntactic, this causes writing to be super slow -- especially for larger
" libraries (i.e. networkx).  Use pyflakes instead, which is a more
" reasonable checker for constant in-editor checking.
let g:syntastic_c_checkers = ['clang_check']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_javascript_checkers = ['eslint']


function! ToggleLocList()
    if empty(filter(getwininfo(), 'v:val.loclist'))
        lopen 5
    else
        lclose
    endif
endfunction


" Leader Mappings
map <Leader>e :call ToggleLocList()<CR>
map <Leader>S :SyntasticToggleMode<CR>
